module fpadder (
     src1,
     src2,
     out
);
	
	input [31:0] src1,src2;
	output reg [31:0] out;
	reg [255:0]src1_fra;
	reg [255:0]src2_fra;
	reg [7:0]src1_exp;
	reg [7:0]src2_exp;
	reg src1_sign;
	reg src2_sign;
	reg [7:0]final_exp;
	reg [7:0]shift_amount;
	reg [255:0]bigger;
	reg [255:0]smaller;
	reg [255:0]fra_result;
	reg final_sign;
	reg [255:0]gap;
	reg [255:0]biggest;
	integer i;
	reg possibility;

always @(*) 
	begin
	 	
	
	//giving number to each section
	begin
		src1_fra = src1[22:0];
		src2_fra = src2[22:0];
		src1_exp = src1[30:23];
		src2_exp = src2[30:23];
		src1_sign = src1[31];
		src2_sign = src2[31];
	end 





	//decides the final exponents
	begin
		if (src1_exp>=src2_exp) begin
			final_exp = src1_exp;
		end else begin
			assign final_exp = src2_exp;
			end
	end


	//gets amount to shift
	begin
		if (src1_exp>=src2_exp) begin
		 shift_amount = src1_exp - src2_exp;
		end else begin
			assign shift_amount = src2_exp - src1_exp;
		end
	end
		
	
	//compare fraction

	begin
		if (src1_fra>src2_fra) begin
			assign bigger = src1_fra;
		end else begin
			assign bigger = src2_fra;
		end
	end

	begin
		if (src1_exp<src2_exp) begin
			assign smaller = src1_fra;
		end else begin
			assign smaller = src2_fra;
		end
	end	
	//calculate fraction




	assign smaller = smaller>>shift_amount;


		
	begin
	i=0;
	if(src1_sign==1&&src2_sign==1) 
			begin
			
			assign fra_result = bigger + smaller;
			assign final_sign = 0;
			assign possibility = 1;
			end
/*			//checks for 
			while(fra_result[i!=1])
				begin
					if (fra_result[i]==0)
						assign i = i+1;
					else if(i>biggest)
						assign biggest = i;
						
				end
			if (src1_fra>src2_fra)
				while(src1_fra[i!=1])
				begin
					if (src1_fra[i]==0) 
							i = i+1;
					else if (i>biggest) 
						assign biggest = i;
				end
			else 
				while(src2_fra[i!=1])
					begin
						if (src2_fra[i]==0) 
							i = i+1;
						else if (i>biggest) 
							assign biggest = i;
					end
				
	if(src1_sign==0&&src2_sign==0) 
			begin		
			assign fra_result = bigger + smaller;
			assign final_sign = 0;
			assign possibility = 1;
			end

			while(fra_result[i!=1])
				begin
					if (fra_result[i]==0)
						assign i = i+1; 
						else if(i>biggest)
						assign biggest = i;
				end
			if (src1_fra>src2_fra)
				while(src1_fra[i!=1])
				begin
					if (src1_fra[i]==0) 
							i = i+1;
					else if (i>biggest) 
						assign biggest = i;
				end
			else 
				while(src2_fra[i!=1])
					begin
						if (src2_fra[i]==0) 
							i = i+1;
						else if (i>biggest) 
							assign biggest = i;
					end 
	if(src1_sign==0&&src2_sign==1&&src1_fra>src2_fra)
		
			assign src2_fra = src2_fra>>shift_amount;
			assign fra_result = src1_fra + src2_fra;
			assign final_sign = 0;
			assign possibility = 1;
			//biggest 1 position in fra_result is "gap"
			while(fra_result[i!=1])
				begin
					if (fra_result[i]==0)
						assign i = i+1;
					else if(i>biggest)
						assign biggest = i;
				end
			//biggest 1 position in previous is "biggest" 
			if (src1_fra>src2_fra)
				while(src1_fra[i!=1])
				begin
					if (src1_fra[i]==0) 
							i = i+1;
					else if (i>biggest) 
						assign biggest = i;
				end
			else 
				while(src2_fra[i!=1])
					begin
						if (src2_fra[i]==0) 
							i = i+1;
						else if (i>biggest) 
							assign biggest = i;
					end
		 
	if(src1_sign==0&&src2_sign==1&&src1_fra<src2_fra)
		
			assign src1_fra = src1_fra>>shift_amount;
			assign fra_result = bigger - smaller;
			assign final_sign = 1;
			assign possibility = 0;

			//biggest 1 position in fra_result is "gap"
			while(fra_result[i!=1])
				begin
					if (fra_result[i]==0)
						assign i = i+1;
					else if(i>biggest)
						assign biggest = i;
				end
			//biggest 1 position in previous is "biggest" 
			if (src1_fra>src2_fra)
				while(src1_fra[i!=1])
				begin
					if (src1_fra[i]==0) 
							i = i+1;
					else if (i>biggest) 
						assign biggest = i;
				end
			else 
				while(src2_fra[i!=1])
					begin
						if (src2_fra[i]==0) 
							i = i+1;
						else if (i>biggest) 
							assign biggest = i;
					end
 
	if(src1_sign==1&&src2_sign==0&&src1_fra>src2_fra) 
		
			//assign src2_fra = src2_fra>>shift_amount;
			assign fra_result = bigger - smaller;
			assign final_sign = 1;
			assign possibility = 0;

			while(fra_result[i!=1])
				begin
					if (fra_result[i]==0)
						assign i = i+1;
					else if(i>biggest)
						assign biggest = i;
				end
			//biggest 1 position in previous is "biggest" 
			if (src1_fra>src2_fra)
				while(src1_fra[i!=1])
				begin
					if (src1_fra[i]==0) 
							i = i+1;
					else if (i>biggest) 
						assign biggest = i;
				end
			else 
				while(src2_fra[i!=1])
					begin
						if (src2_fra[i]==0) 
							i = i+1;
						else if (i>biggest) 
							assign biggest = i;
					end
		 
	if(src1_sign==1&&src2_sign==0&&src1_fra<src2_fra) 
		
			//assign src1_fra = src1_fra>>shift_amount;
			assign fra_result = bigger - smaller;
			assign final_sign = 0;
			assign possibility = 1;

			while(fra_result[i!=1])
				begin
					if (fra_result[i]==0)
						assign i = i+1;
					else if(i>biggest)
						assign biggest = i;
				end
			//biggest 1 position in previous is "biggest" 
			if (src1_fra>src2_fra)
				while(src1_fra[i!=1])
				begin
					if (src1_fra[i]==0) 
							i = i+1;
					else if (i>biggest) 
						assign biggest = i;
				end
			else 
				while(src2_fra[i!=1])
					begin
						if (src2_fra[i]==0) 
							i = i+1;
						else if (i>biggest) 
							assign biggest = i;
					end
	end	
*/

	if(gap>biggest)
		begin
			gap = gap - biggest;
		end
	else if (biggest>gap)
		begin
			gap = biggest - gap;	
		end
	if (possibility==1)
		begin
			final_exp = final_exp>>gap;
		end
	else if (possibility==0) 
			begin
				final_exp = final_exp<<gap;
			end 
	
	out[31] = final_sign;
	out[30:23] = final_exp;
	out[22:0] = fra_result[22:0];


end			 

end
endmodule
